-- RedzProUI.lua
-- Professional UI Library for Roblox (modular, themeable, responsive, animated)
-- Usage: local UI = require(path_to_this_file)
-- Author: generated by ChatGPT (adapt and extend as needed)

local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")

local RedzPro = {}
RedzPro.__index = RedzPro

-- =====================
-- Config / Defaults
-- =====================
local DEFAULTS = {
    UISize = Vector2.new(550, 380),
    TabSize = 160,
    Theme = "dark",
    CornerRadius = UDim.new(0, 12),
    TweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
}

-- Minimal icon map (extendable with RedzPro.Icons["name"] = assetid)
RedzPro.Icons = {
    home = "rbxassetid://10709751939",
    activity = "rbxassetid://10709752035",
    settings = "rbxassetid://10734950309",
    user = "rbxassetid://10747373176",
}

-- Built-in themes
RedzPro.Themes = {
    dark = {
        Background = Color3.fromRGB(20,20,20),
        Primary = Color3.fromRGB(85,0,130),
        Accent = Color3.fromRGB(45,0,90),
        Text = Color3.fromRGB(243,243,243),
        Subtext = Color3.fromRGB(180,180,180),
        Stroke = Color3.fromRGB(40,40,40),
    },
    light = {
        Background = Color3.fromRGB(245,245,247),
        Primary = Color3.fromRGB(60,60,200),
        Accent = Color3.fromRGB(100,100,230),
        Text = Color3.fromRGB(20,20,20),
        Subtext = Color3.fromRGB(90,90,90),
        Stroke = Color3.fromRGB(200,200,200),
    },
    neon = {
        Background = Color3.fromRGB(8,7,15),
        Primary = Color3.fromRGB(0,240,255),
        Accent = Color3.fromRGB(255,0,150),
        Text = Color3.fromRGB(245,245,245),
        Subtext = Color3.fromRGB(180,180,180),
        Stroke = Color3.fromRGB(30,30,30),
    }
}

-- Utility helpers
local function new(class, props)
    local obj = Instance.new(class)
    if props then
        for k,v in pairs(props) do
            pcall(function() obj[k] = v end)
        end
    end
    return obj
end

local function applyCorner(instance, radius)
    local c = Instance.new("UICorner")
    c.CornerRadius = radius or DEFAULTS.CornerRadius
    c.Parent = instance
    return c
end

local function tween(instance, props, info)
    info = info or DEFAULTS.TweenInfo
    local ok, t = pcall(function()
        return TweenService:Create(instance, info, props)
    end)
    if ok and t then t:Play() end
    return t
end

-- Responsive scaling for different viewports
local function calcUIScale(rootSize)
    local height = rootSize.Y
    local scale = math.clamp(height / 450, 0.7, 1.6)
    return scale
end

-- =====================
-- Core API
-- =====================
function RedzPro.new(opts)
    opts = opts or {}
    local self = setmetatable({}, RedzPro)

    self.Save = {
        UISize = opts.UISize or DEFAULTS.UISize,
        TabSize = opts.TabSize or DEFAULTS.TabSize,
        Theme = opts.Theme or DEFAULTS.Theme,
    }

    -- Root elements
    self.ScreenGui = new("ScreenGui", {Name = "RedzProUI", ResetOnSpawn = false, Parent = game:GetService("CoreGui")})
    self.Root = new("Frame", {
        Name = "Root",
        Size = UDim2.new(0, self.Save.UISize.X, 0, self.Save.UISize.Y),
        AnchorPoint = Vector2.new(0.5,0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        BackgroundColor3 = Color3.fromRGB(25,25,25),
        Parent = self.ScreenGui,
    })

    applyCorner(self.Root)
    local stroke = new("UIStroke", {Thickness = 1, Parent = self.Root})

    -- Top bar
    self.TopBar = new("Frame", {Name = "TopBar", Size = UDim2.new(1,0,0,48), Position = UDim2.new(0,0,0,0), BackgroundTransparency = 1, Parent = self.Root})
    self.Title = new("TextLabel", {Name = "Title", Size = UDim2.new(0.6,0,1,0), Position = UDim2.new(0.02,0,0,0), BackgroundTransparency = 1, Text = opts.Title or "RedzPro UI", Font = Enum.Font.GothamBold, TextSize = 18, TextXAlignment = Enum.TextXAlignment.Left, Parent = self.TopBar})

    self.TabContainer = new("Frame", {Name = "TabContainer", Size = UDim2.new(0, self.Save.TabSize, 1, -48), Position = UDim2.new(0,0,0,48), BackgroundTransparency = 1, Parent = self.Root})
    self.TabList = new("ScrollingFrame", {Name = "Tabs", Size = UDim2.new(1,0,1,0), BackgroundTransparency = 1, CanvasSize = UDim2.new(0,0,0,0), ScrollBarThickness = 6, Parent = self.TabContainer})
    self.TabListLayout = new("UIListLayout", {Parent = self.TabList, Padding = UDim.new(0,6), FillDirection = Enum.FillDirection.Vertical})

    self.ContentArea = new("Frame", {Name = "Content", Size = UDim2.new(1, -self.Save.TabSize, 1, -48), Position = UDim2.new(0, self.Save.TabSize, 0, 48), BackgroundTransparency = 1, Parent = self.Root})

    -- Notification holder
    self.NotifyHolder = new("Frame", {Name = "NotifyHolder", Size = UDim2.new(0.35,0,0.9,0), Position = UDim2.new(0.65, -16, 0.06, 0), BackgroundTransparency = 1, Parent = self.Root})

    -- Retain children handles
    self._tabs = {}
    self._elements = {}

    -- Apply theme
    self:ApplyTheme(self.Save.Theme)

    -- Make draggable & responsive
    self.Root.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton2 then
            -- right-click to toggle visibility
            self.ScreenGui.Enabled = not self.ScreenGui.Enabled
        end
    end)

    -- Responsive scaling on viewport change
    RunService:BindToRenderStep("RedzPro_Scale", Enum.RenderPriority.UI.Value, function()
        local size = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize or Vector2.new(1280,720)
        local scale = calcUIScale(size)
        self.Root.Size = UDim2.new(0, math.floor(self.Save.UISize.X * scale), 0, math.floor(self.Save.UISize.Y * scale))
        self.TabContainer.Size = UDim2.new(0, math.floor(self.Save.TabSize * scale), 1, -48)
        self.ContentArea.Position = UDim2.new(0, math.floor(self.Save.TabSize * scale), 0, 48)
    end)

    return self
end

function RedzPro:ApplyTheme(name)
    local theme = RedzPro.Themes[name] or RedzPro.Themes[DEFAULTS.Theme]
    self.Save.Theme = name
    -- background
    self.Root.BackgroundColor3 = theme.Background
    -- top text
    self.Title.TextColor3 = theme.Text
    -- strokes
    for _,v in pairs(self.Root:GetDescendants()) do
        if v:IsA("UIStroke") then
            v.Color = theme.Stroke
        elseif v:IsA("TextLabel") or v:IsA("TextButton") or v:IsA("TextBox") then
            v.TextColor3 = theme.Text
        end
    end
    -- store
    self._theme = theme
end

-- Notification (toast)
function RedzPro:Notify(text, kind, duration)
    duration = duration or 4
    kind = kind or "info" -- info, success, error
    local frame = new("Frame", {Size = UDim2.new(1,0,0,56), BackgroundTransparency = 0, BackgroundColor3 = self._theme and self._theme.Primary or Color3.fromRGB(85,0,130), Parent = self.NotifyHolder})
    applyCorner(frame, UDim.new(0,8))
    local label = new("TextLabel", {Size = UDim2.new(1,-12,1,0), Position = UDim2.new(0,6,0,0), BackgroundTransparency = 1, Text = text or "Notification", Font = Enum.Font.Gotham, TextSize = 14, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left, Parent = frame})

    frame.Position = UDim2.new(1, 200, 0, 0)
    tween(frame, {Position = UDim2.new(1, -8, 0, 0)}, TweenInfo.new(0.4, Enum.EasingStyle.Quint))
    task.delay(duration, function()
        tween(frame, {Position = UDim2.new(1, 200, 0, 0)}, TweenInfo.new(0.3, Enum.EasingStyle.Sine))
        task.delay(0.35, function() frame:Destroy() end)
    end)
end

-- Create Window wrapper (alias to new)
function RedzPro:CreateWindow(opts)
    opts = opts or {}
    local instance = RedzPro.new(opts)
    if opts.Theme then instance:ApplyTheme(opts.Theme) end
    if opts.Title then instance.Title.Text = opts.Title end
    return instance
end

-- Tab creation
function RedzPro:CreateTab(title, iconName)
    local tabButton = new("TextButton", {Size = UDim2.new(1, -12, 0, 44), BackgroundTransparency = 0, BackgroundColor3 = Color3.fromRGB(28,28,28), Text = "  " .. (title or "Tab"), Font = Enum.Font.Gotham, TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left, Parent = self.TabList})
    applyCorner(tabButton)
    local stroke = new("UIStroke", {Thickness = 1, Parent = tabButton})
    stroke.Color = self._theme and self._theme.Stroke or Color3.new(0.15,0.15,0.15)

    -- optional icon
    if iconName and RedzPro.Icons[iconName] then
        local img = new("ImageLabel", {Size = UDim2.new(0,28,0,28), Position = UDim2.new(0,6,0.5,-14), BackgroundTransparency = 1, Image = RedzPro.Icons[iconName], Parent = tabButton})
        tabButton.Text = "   " .. (title or "Tab")
    end

    -- content page
    local page = new("Frame", {Name = title .. "Page", Size = UDim2.new(1, -self.Save.TabSize, 1, -48), Position = UDim2.new(0,0,0,0), BackgroundTransparency = 1, Visible = false, Parent = self.ContentArea})

    -- layout for page
    local layout = new("UIListLayout", {Parent = page, Padding = UDim.new(0,8)})

    -- add to list
    table.insert(self._tabs, {Button = tabButton, Page = page, Title = title})

    tabButton.MouseButton1Click:Connect(function()
        for _,t in ipairs(self._tabs) do
            t.Page.Visible = false
            tween(t.Button, {BackgroundColor3 = Color3.fromRGB(28,28,28)})
        end
        page.Visible = true
        tween(tabButton, {BackgroundColor3 = self._theme and self._theme.Accent or Color3.fromRGB(45,0,90)})
    end)

    -- auto open first tab
    if #self._tabs == 1 then
        tabButton.MouseButton1Click:Wait()
        tabButton:Destroy() -- remove fake click leftover
    end

    local tabApi = {}
    function tabApi:CreateButton(text, callback)
        local btn = new("TextButton", {Size = UDim2.new(1, -24, 0, 42), BackgroundColor3 = Color3.fromRGB(40,40,40), Text = text or "Button", Font = Enum.Font.Gotham, TextSize = 14, Parent = page})
        applyCorner(btn)
        local stroke = new("UIStroke", {Thickness = 1, Parent = btn})
        stroke.Color = self._theme and self._theme.Stroke or Color3.fromRGB(50,50,50)

        -- hover
        btn.MouseEnter:Connect(function()
            tween(btn, {Size = UDim2.new(1, -22, 0, 44)}, TweenInfo.new(0.18, Enum.EasingStyle.Quad))
        end)
        btn.MouseLeave:Connect(function()
            tween(btn, {Size = UDim2.new(1, -24, 0, 42)}, TweenInfo.new(0.18, Enum.EasingStyle.Quad))
        end)

        btn.MouseButton1Click:Connect(function()
            tween(btn, {Size = UDim2.new(1, -26, 0, 40)}, TweenInfo.new(0.06, Enum.EasingStyle.Sine))
            task.wait(0.06)
            tween(btn, {Size = UDim2.new(1, -24, 0, 42)}, TweenInfo.new(0.08, Enum.EasingStyle.Sine))
            if type(callback) == "function" then pcall(callback) end
        end)

        return btn
    end

    function tabApi:CreateToggle(text, default, callback)
        local frame = new("Frame", {Size = UDim2.new(1, -24, 0, 34), BackgroundTransparency = 1, Parent = page})
        local label = new("TextLabel", {Size = UDim2.new(0.75,0,1,0), BackgroundTransparency = 1, Text = text or "Toggle", Font = Enum.Font.Gotham, TextSize = 14, Parent = frame})
        local toggleBtn = new("TextButton", {Size = UDim2.new(0,40,0,24), Position = UDim2.new(1,-44,0.5,-12), BackgroundColor3 = Color3.fromRGB(80,80,80), Text = "", Parent = frame})
        applyCorner(toggleBtn, UDim.new(0,8))
        local state = default and true or false
        local function refresh()
            if state then
                tween(toggleBtn, {BackgroundColor3 = self._theme and self._theme.Primary or Color3.fromRGB(85,0,130)})
            else
                tween(toggleBtn, {BackgroundColor3 = Color3.fromRGB(80,80,80)})
            end
        end
        toggleBtn.MouseButton1Click:Connect(function()
            state = not state
            refresh()
            if type(callback) == "function" then pcall(callback, state) end
        end)
        refresh()
        return {Frame = frame, Get = function() return state end, Set = function(v) state = v; refresh() end}
    end

    function tabApi:CreateSlider(text, min, max, default, callback)
        local frame = new("Frame", {Size = UDim2.new(1, -24, 0, 48), BackgroundTransparency = 1, Parent = page})
        local label = new("TextLabel", {Size = UDim2.new(1,0,0,18), BackgroundTransparency = 1, Text = text or "Slider", Font = Enum.Font.Gotham, TextSize = 14, Parent = frame})
        local barBg = new("Frame", {Size = UDim2.new(1,0,0,12), Position = UDim2.new(0,0,0,28), BackgroundColor3 = Color3.fromRGB(50,50,50), Parent = frame})
        applyCorner(barBg, UDim.new(0,6))
        local fill = new("Frame", {Size = UDim2.new(0,0,1,0), BackgroundColor3 = self._theme and self._theme.Primary or Color3.fromRGB(85,0,130), Parent = barBg})
        applyCorner(fill, UDim.new(0,6))

        local dragging = false
        local function setValueFromPos(x)
            x = math.clamp(x, 0, barBg.AbsoluteSize.X)
            local ratio = x / barBg.AbsoluteSize.X
            fill.Size = UDim2.new(ratio,0,1,0)
            local value = math.floor(min + (max - min) * ratio)
            if type(callback) == "function" then pcall(callback, value) end
        end

        barBg.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                setValueFromPos(input.Position.X - barBg.AbsolutePosition.X)
            end
        end)
        barBg.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
        end)
        barBg.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                setValueFromPos(input.Position.X - barBg.AbsolutePosition.X)
            end
        end)

        -- init default
        task.delay(0.05, function()
            local ratio = (default - min) / (max - min)
            fill.Size = UDim2.new(math.clamp(ratio,0,1),0,1,0)
            if type(callback) == "function" then pcall(callback, default) end
        end)

        return {Frame = frame}
    end

    function tabApi:CreateDropdown(text, options, callback)
        options = options or {}
        local frame = new("Frame", {Size = UDim2.new(1, -24, 0, 42), BackgroundTransparency = 1, Parent = page})
        local label = new("TextLabel", {Size = UDim2.new(0.7,0,1,0), BackgroundTransparency = 1, Text = text or "Dropdown", Font = Enum.Font.Gotham, TextSize = 14, Parent = frame})
        local btn = new("TextButton", {Size = UDim2.new(0,120,0,28), Position = UDim2.new(1,-126,0.5,-14), BackgroundColor3 = Color3.fromRGB(45,45,45), Text = "Select", Parent = frame})
        applyCorner(btn)

        local menu = new("Frame", {Size = UDim2.new(0,120,0,#options*28), Position = UDim2.new(1,-126,1,6), BackgroundColor3 = Color3.fromRGB(40,40,40), Visible = false, Parent = frame})
        applyCorner(menu)

        for i,opt in ipairs(options) do
            local it = new("TextButton", {Size = UDim2.new(1,0,0,28), Position = UDim2.new(0,0,0,(i-1)*28), BackgroundTransparency = 1, Text = opt, Parent = menu})
            it.MouseButton1Click:Connect(function()
                btn.Text = opt
                menu.Visible = false
                if type(callback) == "function" then pcall(callback, opt) end
            end)
        end

        btn.MouseButton1Click:Connect(function() menu.Visible = not menu.Visible end)
        return {Frame = frame, Button = btn}
    end

    return tabApi
end

-- Utility: extend icons
function RedzPro:RegisterIcon(name, asset)
    RedzPro.Icons[name] = asset
end

-- Export
return RedzPro
